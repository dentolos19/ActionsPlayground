name: Reusable Workflow for .NET MAUI Deployment
on:
  workflow_call:
    inputs:
      TARGET_BRANCH:
        type: string
        required: true
      PROJECT_FILE:
        type: string
        required: true
      RELEASE_TAG:
        type: string
        required: true
      WINDOWS_TARGET_FRAMEWORK:
        type: string
        required: true
      ANDROID_TARGET_FRAMEWORK:
        type: string
        required: true
      SIGNING_CERTIFICATE:
        type: string
        description: your pfx file encoded in base64 string
      SIGNING_KEY:
        type: string
        description: your key for accessing the certificate
jobs:
  windowsBuild:
    name: Build for Windows
    continue-on-error: true
    runs-on: windows-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.TARGET_BRANCH }}
          lfs: true
          submodules: recursive
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
      - name: Install .NET Workloads
        run: |
          dotnet workload install maui
      - id: certificate
        name: Install Signing Certificate
        run: |
          if (![string]::IsNullOrEmpty("${{ inputs.SIGNING_CERTIFICATE }}") -and ![string]::IsNullOrEmpty("${{ inputs.SIGNING_KEY }}")) {
            $bytes = [System.Convert]::FromBase64String("${{ inputs.SIGNING_CERTIFICATE }}")
            [IO.File]::WriteAllBytes("certificate.pfx", $bytes)
            $password = ConvertTo-SecureString ${{ inputs.SIGNING_KEY }} -AsPlainText
            Import-PfxCertificate certificate.pfx -CertStoreLocation "Cert:\CurrentUser\My" -Password $password
            $thumbprint = (Get-PfxCertificate Certificate.pfx -Password $password).Thumbprint
            Write-Output -InputObject "SIGNING_THUMBPRINT=$thumbprint" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
      - name: Publish Project
        run: |
          if ([string]::IsNullOrEmpty("${{ steps.certificate.outputs.SIGNING_THUMBPRINT }}")) {
            dotnet publish ${{ inputs.PROJECT_FILE }} --framework ${{ inputs.WINDOWS_TARGET_FRAMEWORK }} --configuration Release -p:GenerateAppxPackageOnBuild=true -p:AppxPackageDir=${{ github.workspace }}/packages/
          } else {
            dotnet publish ${{ inputs.PROJECT_FILE }} --framework ${{ inputs.WINDOWS_TARGET_FRAMEWORK }} --configuration Release -p:GenerateAppxPackageOnBuild=true -p:AppxPackageSigningEnabled=true -p:PackageCertificateThumbprint=${{ steps.certificate.outputs.SIGNING_THUMBPRINT }} -p:AppxPackageDir=${{ github.workspace }}/packages/
          }
          $artifact = (Get-ChildItem ${{ github.workspace }}/packages/*_Test/*.msix).FullName | Select-Object -First 1
          New-Item -Path artifacts -ItemType Directory
          Move-Item -Path $artifact -Destination artifacts/${{ github.event.repository.name }}_windows.msix
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Output
          path: artifacts
  androidBuild:
    name: Build for Android
    continue-on-error: true
    runs-on: windows-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.TARGET_BRANCH }}
          lfs: true
          submodules: recursive
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: microsoft
          java-version: 11
      - name: Install .NET Workloads
        run: |
          dotnet workload install maui
          dotnet workload install android
      - name: Publish Project
        run: |
          dotnet publish ${{ inputs.PROJECT_FILE }} --framework ${{ inputs.ANDROID_TARGET_FRAMEWORK }} --configuration Release --output build
          $artifact = (Get-ChildItem build/*.apk).FullName | Select-Object -First 1
          New-Item -Path artifacts -ItemType Directory
          Move-Item -Path $artifact -Destination artifacts/${{ github.event.repository.name }}_android.apk
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Output
          path: artifacts
  deploy:
    name: Deploy
    needs: [ windowsBuild, androidBuild ]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: Output
          path: artifacts
      - name: Delete (Existing) Releases
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.RELEASE_TAG }}
          delete_release: true
          delete_draft_release: true
      - name: Release Artifacts
        uses: softprops/action-gh-release@v0.1.15
        with:
          target_commitish: ${{ inputs.TARGET_BRANCH }}
          tag_name: ${{ inputs.RELEASE_TAG }}
          prerelease: true
          files: artifacts/*